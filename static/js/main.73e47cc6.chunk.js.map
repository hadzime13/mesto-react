{"version":3,"sources":["components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","components/ImagePopup.js","components/PopupWithForm.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","utils/Api.js","components/App.js","serviceWorker.js","index.js","images/logo.svg","images/Vector.svg"],"names":["Header","className","src","logo","alt","CurrentUserContext","React","createContext","Card","onCardClick","cardElement","onCardLike","onCardDelete","currentUser","useContext","cardDeleteButtonClassName","_id","owner","isLiked","likes","some","like","cardLikeButtonClassName","type","onClick","link","name","length","Main","memo","cards","onEditProfile","onAddPlace","onEditAvatar","onMouseOnAvatar","onMouseOffAvatar","isAvatarButtonActive","style","backgroundImage","avatar","onMouseEnter","onMouseLeave","avatarEdit","aria-label","about","map","card","key","Footer","ImagePopup","onClose","PopupWithForm","isOpen","title","buttonText","children","onSubmit","action","method","noValidate","EditProfilePopup","onUpdateUser","useState","setName","description","setDescription","useEffect","e","preventDefault","placeholder","id","value","required","minLength","maxLength","onChange","target","EditAvatarPopup","onUpdateAvatar","avatarRef","useRef","current","ref","defaultValue","AddPlacePopup","setLink","api","url","headers","this","_url","_headers","res","ok","json","Promise","reject","statusText","err","console","log","fetch","then","_handleResponse","userData","body","JSON","stringify","newAvatar","cardId","authorization","App","setCards","isEditProfilePopupOpen","setPopupProfileState","isAddPlacePopupOpen","setPopupPlaceState","isEditAvatarPopupOpen","setPopupAvatarState","isAvatarEditButtonActive","setAvatarEditButton","selectedCard","setSelectedCard","setCurrentUser","closeAllPopups","promises","getUser","getInitialCards","all","user","catch","handleResponseError","Provider","changeLikeStatus","newCard","newCards","c","deleteCard","filter","updateUser","cardData","uploadCard","updateUserAvatar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.73e47cc6.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from '../images/logo.svg';\r\nfunction Header () {\r\n  return (\r\n      <header className=\"header section section_standard\">\r\n        <img src={logo} alt=\"Логотип Место\" className=\"logo\" />\r\n      </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nexport const CurrentUserContext = React.createContext();","import React from 'react';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\n\r\nfunction Card({ onCardClick, cardElement, onCardLike, onCardDelete }) {\r\n  const handleCLick = () => {\r\n    onCardClick(cardElement);\r\n  };\r\n\r\n  const handleLikeClick = () => {\r\n    onCardLike(cardElement);\r\n  }\r\n\r\n  const handleDeleteClick = () => {\r\n    onCardDelete(cardElement);\r\n  }\r\n  const currentUser = React.useContext(CurrentUserContext);\r\n  const cardDeleteButtonClassName = (`photo-elements__delete-btn ${currentUser._id !== cardElement.owner._id ? 'photo-elements__delete-btn_inactive' : ''}`);\r\n  const isLiked = cardElement.likes.some(like => like._id === currentUser._id);\r\n  const cardLikeButtonClassName = (`photo-elements__like ${isLiked ? 'photo-elements__like_active' : ''}`)\r\n\r\n  return (\r\n    (<li className=\"photo-elements__list-item\">\r\n      <button type=\"button\" className={cardDeleteButtonClassName} onClick={handleDeleteClick}></button>\r\n      <img className=\"photo-elements__image\" src={cardElement.link} alt={cardElement.name} onClick={handleCLick} />\r\n      <h2 className=\"photo-elements__name\">{cardElement.name}</h2>\r\n      <div className=\"photo-elements__like-wrapper\">\r\n        <button type=\"button\" className={cardLikeButtonClassName} onClick={handleLikeClick}></button>\r\n        <span className=\"photo-elements__like-span\">{cardElement.likes.length}</span>\r\n      </div>\r\n    </li>)\r\n  );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\nimport avatarEdit from '../images/Vector.svg'\r\nimport Card from './Card'\r\n\r\nconst Main = React.memo(({\r\n  cards,\r\n  onEditProfile,\r\n  onAddPlace,\r\n  onEditAvatar,\r\n  onMouseOnAvatar,\r\n  onMouseOffAvatar,\r\n  isAvatarButtonActive,\r\n  onCardClick,\r\n  onCardLike,\r\n  onCardDelete\r\n}) => {\r\n  // Стейт пользователя \r\n  const currentUser = React.useContext(CurrentUserContext);\r\n  return (\r\n    <main className=\"content\">\r\n\r\n      <section className=\"profile section section_standard\">\r\n        <div className=\"profile__overlay\">\r\n          <div className=\"profile__avatar\" style={{ backgroundImage: `url(${currentUser.avatar})` }}\r\n            onMouseEnter={onMouseOnAvatar}\r\n            onMouseLeave={onMouseOffAvatar}\r\n            onClick={onEditAvatar} >\r\n            <img src={avatarEdit} alt=\"Изменить аватар\" className={`profile__avatar-edit-btn ${isAvatarButtonActive && 'profile__avatar-edit-btn_active'}`}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"profile__info\">\r\n          <h1 className=\"profile__name\">{currentUser.name}</h1>\r\n          <button type=\"button\" aria-label=\"Редактировать\" className=\"profile__edit-btn\" onClick={onEditProfile}>\r\n          </button>\r\n          <p className=\"profile__job\">{currentUser.about}</p>\r\n        </div>\r\n        <button type=\"button\" aria-label=\"Добавить\" className=\"profile__add-btn\" onClick={onAddPlace}>\r\n        </button>\r\n      </section>\r\n\r\n      <section className=\"photo-elements section section_standard\" aria-label=\"Места\">\r\n        <ul className=\"photo-elements__list\">\r\n          {cards.map((card) =>\r\n            <Card\r\n              key={card._id}\r\n              cardElement={card}\r\n              onCardClick={onCardClick}\r\n              onCardLike={onCardLike}\r\n              onCardDelete={onCardDelete} />)}\r\n        </ul>\r\n      </section>\r\n    </main>\r\n  );\r\n});\r\n\r\nexport default Main;\r\n\r\n","import React from 'react';\r\n\r\nfunction Footer () {\r\n  return (\r\n    <footer className=\"footer section section_standard\">\r\n        <p className=\"footer__copyright\">&copy; 2020 Mesto Russia</p>\r\n      </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nfunction ImagePopup({ card, onClose }) {\r\n  return (\r\n    <section className={`popup popup_photo ${card.link ? 'popup_opened' : ''}`}>\r\n      <div className=\"popup__photo-container\">\r\n        <button type=\"reset\" aria-label=\"Закрыть\" className=\"popup__close-btn\" onClick={onClose}></button>\r\n        <img src={card.link} alt={card.name} className=\"popup__image\" />\r\n        <h3 className=\"popup__photo-name\">\r\n          {card.name}\r\n        </h3>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ImagePopup;","import React from 'react';\r\n\r\n\r\nconst PopupWithForm = React.memo(({ isOpen, onClose, title, name, buttonText, children, onSubmit }) => {\r\n \r\n  return (\r\n    <section className={`popup popup_${name} ${isOpen ? 'popup_opened' : ''}`}>\r\n      <form action=\"#\" method=\"POST\" className=\"popup__container\" noValidate onSubmit={onSubmit}>\r\n        <button type=\"reset\" aria-label=\"Закрыть\" className=\"popup__close-btn\" onClick={onClose}></button>\r\n        <h2 className=\"popup__name\">\r\n          {title}\r\n        </h2>\r\n\r\n        <fieldset className=\"popup__input-form\">\r\n          {children}\r\n          <button type=\"submit\" className=\"popup__save-btn\">\r\n            {buttonText}\r\n          </button>\r\n        </fieldset>\r\n      </form>\r\n    </section>\r\n  );\r\n});\r\nexport default PopupWithForm;","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm'\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\n\r\n//Попап редактирования профиля\r\nconst EditProfilePopup = React.memo(({ isOpen, onClose, onUpdateUser }) => {\r\n  const currentUser = React.useContext(CurrentUserContext);\r\n  const [name, setName] = React.useState('');\r\n  const [description, setDescription] = React.useState('');\r\n  \r\n  const handleChangeName = (e) => {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  const handleChangeDescription = (e) => {\r\n    setDescription(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onUpdateUser({\r\n      name,\r\n      about: description\r\n    });\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    setName(currentUser.name);\r\n    setDescription(currentUser.about);\r\n  }, [currentUser, isOpen]);\r\n\r\n  return <PopupWithForm\r\n    isOpen={isOpen}\r\n    onClose={onClose}\r\n    title=\"Редактировать профиль\"\r\n    name=\"profile\"\r\n    buttonText=\"Сохранить\"\r\n    onSubmit={handleSubmit}>\r\n    <>\r\n      <input type=\"text\" placeholder=\"Имя\" name=\"input-name\" id=\"input-name\" value={name ? name : ''}\r\n        className=\"popup__text popup__text_el_name\" required minLength=\"2\" maxLength=\"40\" onChange={handleChangeName} />\r\n      <span className=\"popup__error\" id=\"input-name-error\"></span>\r\n\r\n      <input type=\"text\" placeholder=\"Профессия\" name=\"input-job\" id=\"input-job\" value={description ? description : ''}\r\n        className=\"popup__text popup__text_el_job\" required minLength=\"2\" maxLength=\"200\" onChange={handleChangeDescription} />\r\n      <span className=\"popup__error\" id=\"input-job-error\"></span>\r\n    </>\r\n  </PopupWithForm>\r\n});\r\n\r\nexport default EditProfilePopup;","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm'\r\n\r\n\r\nconst EditAvatarPopup = React.memo(({ isOpen, onClose, onUpdateAvatar }) => {\r\n  const avatarRef = React.useRef();\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onUpdateAvatar(avatarRef.current.value);\r\n  }\r\n  // Сброс полей ввода\r\n  React.useEffect(() => {\r\n    avatarRef.current.value = '';\r\n  }, [isOpen])\r\n\r\n  return (\r\n    <PopupWithForm\r\n      isOpen={isOpen}\r\n      onClose={onClose}\r\n      title=\"Обновить аватар\"\r\n      name=\"avatar\"\r\n      buttonText=\"Сохранить\"\r\n      onSubmit={handleSubmit}>\r\n      <>\r\n        <input type=\"url\" ref={avatarRef} placeholder=\"Ссылка на аватар\" name=\"input-avatarLink\" id=\"input-avatarLink\" defaultValue=\"\"\r\n          className=\"popup__text popup__text_el_image-link\" required />\r\n        <span className=\"popup__error\" id=\"input-avatarLink-error\"></span>\r\n      </>\r\n    </PopupWithForm>\r\n  )\r\n});\r\n\r\nexport default EditAvatarPopup;\r\n\r\n","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm'\r\n\r\nconst AddPlacePopup = ({ isOpen, onClose, onAddPlace }) => {\r\n  const [name, setName] = React.useState('');\r\n  const [link, setLink] = React.useState('');\r\n\r\n  const handleChangeName = (e) => {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  const handleChangeLink = (e) => {\r\n    setLink(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onAddPlace({ name, link });\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    setLink('');\r\n    setName('');\r\n  }, [isOpen])\r\n\r\n  return (\r\n    <PopupWithForm\r\n      isOpen={isOpen}\r\n      onClose={onClose}\r\n      title=\"Новое место\"\r\n      name=\"cards\"\r\n      buttonText=\"Создать\"\r\n      onSubmit={handleSubmit}>\r\n      <>\r\n        <input type=\"text\" placeholder=\"Название\" name=\"input-place\" id=\"input-place\" value={name}\r\n          className=\"popup__text popup__text_el_place\" required minLength=\"1\" maxLength=\"40\" onChange={handleChangeName} />\r\n        <span className=\"popup__error\" id=\"input-place-error\"></span>\r\n\r\n        <input type=\"url\" placeholder=\"Ссылка на картинку\" name=\"input-link\" id=\"input-link\" value={link}\r\n          className=\"popup__text popup__text_el_image-link\" required onChange={handleChangeLink} />\r\n        <span className=\"popup__error\" id=\"input-link-error\"></span>\r\n      </>\r\n    </PopupWithForm>\r\n  )\r\n}\r\n\r\nexport default AddPlacePopup;","class Api {\r\n  constructor({ url, headers }) {\r\n    this._url = url;\r\n    this._headers = headers;\r\n  }\r\n  // Метод обработки ответа\r\n  _handleResponse(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(res.statusText);\r\n  };\r\n\r\n  // Метод обработки ошибки запроса\r\n  handleResponseError(err) {\r\n    console.log(`Error,${err}`);\r\n    return Promise.reject(err['message']);\r\n  };\r\n\r\n  // Получение инфо о пользователе\r\n  getUser() {\r\n    return fetch(`${this._url}/users/me`, {\r\n      method: 'GET',\r\n      headers: this._headers\r\n    },\r\n    )\r\n      .then(this._handleResponse)\r\n  }\r\n\r\n  // Обновление данных пользователя\r\n  updateUser(userData) {\r\n    return fetch(`${this._url}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: userData['name'],\r\n        about: userData['about']\r\n      })\r\n    },\r\n    )\r\n      .then(this._handleResponse)\r\n  };\r\n\r\n  // Обновление аватара\r\n  updateUserAvatar(newAvatar) {\r\n    return fetch(`${this._url}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        avatar: newAvatar,\r\n      })\r\n    },\r\n    )\r\n      .then(this._handleResponse)\r\n  };\r\n\r\n  // Загрузка массива карточек с сервера\r\n  getInitialCards() {\r\n    return fetch(`${this._url}/cards`, {\r\n      method: 'GET',\r\n      headers: this._headers\r\n    },\r\n    )\r\n      .then(this._handleResponse)\r\n  };\r\n\r\n  // Добавление карточки\r\n  uploadCard({ name, link }) {\r\n    return fetch(`${this._url}/cards`, {\r\n      method: 'POST',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: name,\r\n        link: link\r\n      })\r\n    },\r\n    )\r\n      .then(this._handleResponse)\r\n  };\r\n  // Удаление карточки \r\n  deleteCard(id) {\r\n    return fetch(`${this._url}/cards/${id}`, {\r\n      method: 'DELETE',\r\n      headers: this._headers,\r\n    },\r\n    )\r\n      .then(this._handleResponse)\r\n  };\r\n  // Методы лайков\r\n\r\n  changeLikeStatus(cardId, isLiked) {\r\n    if (isLiked) {\r\n      return fetch(`${this._url}/cards/likes/${cardId}`, {\r\n        method: 'DELETE',\r\n        headers: this._headers\r\n      })\r\n        .then(this._handleResponse)\r\n    }\r\n    else {\r\n      return fetch(`${this._url}/cards/likes/${cardId}`, {\r\n        method: 'PUT',\r\n        headers: this._headers\r\n      })\r\n        .then(this._handleResponse)\r\n    }\r\n  };\r\n}\r\n\r\nconst api = new Api({\r\n  url: 'https://mesto.nomoreparties.co/v1/cohort-15',\r\n  headers: {\r\n    authorization: '37456d63-78f1-44ef-bbbe-976c826581c0',\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\nexport default api;","import React from 'react';\r\nimport Header from './Header';\r\nimport Main from './Main';\r\nimport Footer from './Footer';\r\nimport ImagePopup from './ImagePopup';\r\nimport EditProfilePopup from './EditProfilePopup'\r\nimport EditAvatarPopup from './EditAvatarPopup'\r\nimport AddPlacePopup from './AddPlacePopup';\r\nimport api from '../utils/Api';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\n\r\n\r\nfunction App() {\r\n  // Переменные состояния\r\n  // Массив карточек \r\n  const [cards, setCards] = React.useState([]);\r\n  //открыт попап профиля или нет \r\n  const [isEditProfilePopupOpen, setPopupProfileState] = React.useState(false);\r\n  //открыт попап добавления карточки или нет \r\n  const [isAddPlacePopupOpen, setPopupPlaceState] = React.useState(false);\r\n  // открыт попап редактирования аватара или нет \r\n  const [isEditAvatarPopupOpen, setPopupAvatarState] = React.useState(false);\r\n  // Активна ли кнопка редактирования аватара\r\n  const [isAvatarEditButtonActive, setAvatarEditButton] = React.useState(false);\r\n  // выбор карточки\r\n  const [selectedCard, setSelectedCard] = React.useState({});\r\n  // Пользователь\r\n  const [currentUser, setCurrentUser] = React.useState({});\r\n  // Функция добавления карточки\r\n  const handleAddPlaceSubmit = (cardData) => {\r\n    api.uploadCard(cardData)\r\n      .then((newCard) => {\r\n        setCards([newCard, ...cards]);\r\n        closeAllPopups();\r\n      })\r\n      .catch((res) => {\r\n        api.handleResponseError(res);\r\n      })\r\n  }\r\n\r\n  // Функция поддержки лайков\r\n  const handleCardLike = (card) => {\r\n    const isLiked = card.likes.some(like => like._id === currentUser._id);\r\n    api.changeLikeStatus(card._id, isLiked)\r\n      .then((newCard) => {\r\n        const newCards = cards.map((c) => c._id === card._id ? newCard : c);\r\n        setCards(newCards);\r\n      })\r\n      .catch((res) => {\r\n        api.handleResponseError(res);\r\n      })\r\n  };\r\n  // Функция удаления карточки\r\n  const handleCardDelete = (card) => {\r\n    api.deleteCard(card._id)\r\n      .then(() => {\r\n        const newCards = cards.filter((c) => c._id !== card._id);\r\n        setCards(newCards);\r\n      })\r\n      .catch((res) => {\r\n        api.handleResponseError(res);\r\n      })\r\n  }\r\n\r\n  // Обработчики открытия попапов\r\n  const handleEditAvatarClick = () => {\r\n    setPopupAvatarState(true);\r\n  };\r\n  const handleEditProfileClick = () => {\r\n    setPopupProfileState(true);\r\n  };\r\n  const handleAddPlaceClick = () => {\r\n    setPopupPlaceState(true);\r\n  };\r\n  // Функция закрытия попапов\r\n  const closeAllPopups = () => {\r\n    setPopupAvatarState(false);\r\n    setPopupProfileState(false);\r\n    setPopupPlaceState(false);\r\n    setSelectedCard({});\r\n  };\r\n  const handleCardClick = (cardElement) => {\r\n    setSelectedCard(cardElement);\r\n  };\r\n  // Обработчик кнопки редактирования аватара\r\n  const handleEditAvatarOn = () => {\r\n    setAvatarEditButton(true);\r\n  }\r\n  const handleEditAvatarOff = () => {\r\n    setAvatarEditButton(false);\r\n  }\r\n  // Функция обновления инфо о юзере при сабмите\r\n  const handleUpdateUser = (userData) => {\r\n    api.updateUser(userData)\r\n      .then((res) => {\r\n        setCurrentUser(res);\r\n        closeAllPopups();\r\n      })\r\n      .catch((res) => {\r\n        api.handleResponseError(res);\r\n      })\r\n  }\r\n  // Функция обновления аватара при сабмите\r\n  const handleUpdateAvatar = (newAvatar) => {\r\n    api.updateUserAvatar(newAvatar)\r\n      .then((res) => {\r\n        setCurrentUser(res);\r\n        closeAllPopups();\r\n      })\r\n      .catch((res) => {\r\n        api.handleResponseError(res);\r\n      })\r\n  }\r\n\r\n\r\n  // Загрузка данных о пользователе и карточек страницы\r\n  React.useEffect(() => {\r\n    const promises = [api.getUser(), api.getInitialCards()]\r\n    Promise.all(promises)\r\n      .then(([user, cards]) => {\r\n        setCurrentUser(user);\r\n        setCards(cards);\r\n      })\r\n      .catch((res) => {\r\n        api.handleResponseError(res);\r\n      })\r\n  }, []);\r\n  \r\n  return (\r\n    <CurrentUserContext.Provider value={currentUser}>\r\n      <>\r\n        <div className=\"page__container\">\r\n          <Header />\r\n          <Main\r\n            cards={cards}\r\n            onEditProfile={handleEditProfileClick}\r\n            onAddPlace={handleAddPlaceClick}\r\n            onEditAvatar={handleEditAvatarClick}\r\n            onMouseOnAvatar={handleEditAvatarOn}\r\n            onMouseOffAvatar={handleEditAvatarOff}\r\n            isAvatarButtonActive={isAvatarEditButtonActive}\r\n            onCardClick={handleCardClick}\r\n            onCardLike={handleCardLike}\r\n            onCardDelete={handleCardDelete} />\r\n          <Footer />\r\n        </div>\r\n        {/* Попап редактирования профиля */}\r\n        <EditProfilePopup isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} onUpdateUser={handleUpdateUser} />\r\n        {/* Попап добавления карточки */}\r\n        <AddPlacePopup isOpen={isAddPlacePopupOpen} onClose={closeAllPopups} onAddPlace={handleAddPlaceSubmit} />\r\n        {/* Попап редактирования аватара */}\r\n        <EditAvatarPopup isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} onUpdateAvatar={handleUpdateAvatar} />\r\n        {/* Попап полноразмерного фото карточки */}\r\n        <ImagePopup card={selectedCard} onClose={closeAllPopups} />\r\n      </>\r\n    </CurrentUserContext.Provider>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.855a8c98.svg\";","module.exports = __webpack_public_path__ + \"static/media/Vector.34c46850.svg\";"],"sourceRoot":""}